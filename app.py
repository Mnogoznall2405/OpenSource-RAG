import streamlit as st
import weaviate
import os
import requests
import json
import sys
import logging
import traceback
from dotenv import load_dotenv
import pandas as pd
from functools import lru_cache
import re
from nltk.stem import SnowballStemmer
import importlib.util
from bs4 import BeautifulSoup
import tempfile
import shutil  # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from weaviate.classes.config import Property, DataType # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ö–µ–º Weaviate v4
from weaviate.exceptions import UnexpectedStatusCodeError # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Weaviate

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑ Streamlit secrets
load_dotenv()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
def get_env_vars():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ª–æ–≥"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ —Å–µ–∫—Ä–µ—Ç—ã Streamlit
    if hasattr(st, 'secrets'):
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Streamlit secrets")
        env_vars = {
            # Weaviate –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            "WEAVIATE_HOST": st.secrets.get("weaviate", {}).get("host") or os.getenv("WEAVIATE_HOST"),
            "WEAVIATE_PORT": st.secrets.get("weaviate", {}).get("port") or os.getenv("WEAVIATE_PORT"),
            "WEAVIATE_GRPC_PORT": st.secrets.get("weaviate", {}).get("grpc_port") or os.getenv("WEAVIATE_GRPC_PORT"),
            
            # API –∫–ª—é—á–∏
            "OPENROUTER_API_KEY": st.secrets.get("api", {}).get("openrouter_key") or os.getenv("OPENROUTER_API_KEY"),
            "OPENROUTER_MODEL": st.secrets.get("api", {}).get("openrouter_model") or os.getenv("OPENROUTER_MODEL"),
            "OPENROUTER_API_URL": st.secrets.get("api", {}).get("openrouter_url") or os.getenv("OPENROUTER_API_URL"),
            "HUGGINGFACE_TOKEN": st.secrets.get("api", {}).get("huggingface_token") or os.getenv("HUGGINGFACE_TOKEN"),
            
            # Google PSE
            "GOOGLE_PSE_API_KEY": st.secrets.get("google", {}).get("pse_api_key") or os.getenv("GOOGLE_PSE_API_KEY"),
            "GOOGLE_PSE_ID": st.secrets.get("google", {}).get("pse_id") or os.getenv("GOOGLE_PSE_ID")
        }
    else:
        logger.info("Streamlit secrets –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        env_vars = {
            "WEAVIATE_HOST": os.getenv("WEAVIATE_HOST"),
            "WEAVIATE_PORT": os.getenv("WEAVIATE_PORT"),
            "WEAVIATE_GRPC_PORT": os.getenv("WEAVIATE_GRPC_PORT"),
            "OPENROUTER_API_KEY": os.getenv("OPENROUTER_API_KEY"),
            "OPENROUTER_MODEL": os.getenv("OPENROUTER_MODEL"),
            "OPENROUTER_API_URL": os.getenv("OPENROUTER_API_URL"),
            "HUGGINGFACE_TOKEN": os.getenv("HUGGINGFACE_TOKEN"),
            "GOOGLE_PSE_API_KEY": os.getenv("GOOGLE_PSE_API_KEY"),
            "GOOGLE_PSE_ID": os.getenv("GOOGLE_PSE_ID")
        }
    
    logger.info("–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in env_vars.items():
        if key.endswith("_KEY") or key.endswith("_TOKEN"):
            display_value = "***" + value[-4:] if value else None
        else:
            display_value = value
        logger.info(f"{key}: {display_value}")
    
    return env_vars

env_vars = get_env_vars()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env —Ñ–∞–π–ª–∞ ---
WEAVIATE_HOST = env_vars["WEAVIATE_HOST"]
WEAVIATE_PORT = int(env_vars["WEAVIATE_PORT"]) if env_vars["WEAVIATE_PORT"] else 8080
WEAVIATE_GRPC_PORT = int(env_vars["WEAVIATE_GRPC_PORT"]) if env_vars["WEAVIATE_GRPC_PORT"] else 50051
CLASS_NAME = "DocumentChunkV4"
EMBEDDING_MODEL_NAME = 'sentence-transformers/all-MiniLM-L6-v2'
OPENROUTER_API_KEY = env_vars["OPENROUTER_API_KEY"]
OPENROUTER_MODEL = env_vars["OPENROUTER_MODEL"] or "anthropic/claude-3-haiku"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
OPENROUTER_API_URL = env_vars["OPENROUTER_API_URL"] or "https://openrouter.ai/api/v1"
HF_TOKEN = env_vars["HUGGINGFACE_TOKEN"]
GOOGLE_PSE_API_KEY = env_vars["GOOGLE_PSE_API_KEY"]
GOOGLE_PSE_ID = env_vars["GOOGLE_PSE_ID"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="OpenSource RAG",
    page_icon="üîç",
    layout="wide"
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SentenceTransformer —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å watchdog Streamlit
sentence_transformer_loaded = False

# --- Mock User Store (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏) ---
MOCK_USERS = {
    "user1": "pass1",
    "admin": "adminpass"
}

# --- Session State Initialization ---
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'user_collection_name' not in st.session_state:
    st.session_state.user_collection_name = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate ---
@st.cache_resource
def connect_to_weaviate():
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate: {WEAVIATE_HOST}:{WEAVIATE_PORT} (gRPC: {WEAVIATE_GRPC_PORT})")
    try:
        client = weaviate.connect_to_local(
            host=WEAVIATE_HOST,
            port=WEAVIATE_PORT,
            grpc_port=WEAVIATE_GRPC_PORT
        )
        
        if not client.is_ready():
            st.error("Weaviate –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Weaviate.")
            return None
            
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Weaviate –∏ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤.")
        return client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Weaviate: {e}")
        logger.error(traceback.format_exc())
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Weaviate: {e}")
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ---
def create_user_collection_if_not_exists(client, collection_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é Weaviate —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    try:
        if not client.collections.exists(collection_name):
            logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
            client.collections.create(
                name=collection_name,
                properties=[
                    Property(name="text", data_type=DataType.TEXT),
                    Property(name="filename", data_type=DataType.TEXT),
                    Property(name="chunk_index", data_type=DataType.INT),
                    Property(name="page_number", data_type=DataType.INT),
                    Property(name="element_types", data_type=DataType.TEXT) # –•—Ä–∞–Ω–∏–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                ],
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
                # vectorizer_config=weaviate.classes.config.Configure.Vectorizer.text2vec_transformers()
            )
            logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        else:
            logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except UnexpectedStatusCodeError as e:
        if e.status_code == 422: # Unprocessable Entity - —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            logger.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ö–µ–º—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}': {e}")
            st.error(f"–û—à–∏–±–∫–∞ Weaviate –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π '{collection_name}': {e.message}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{collection_name}': {e}")
        logger.error(traceback.format_exc())
        st.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π '{collection_name}'.")

# --- Authentication Functions ---
def login(username, password):
    if username in MOCK_USERS and MOCK_USERS[username] == password:
        st.session_state.logged_in = True
        st.session_state.username = username
        st.session_state.user_collection_name = f"Collection_{username.replace(' ', '_')}" # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        client = connect_to_weaviate() # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if client:
            create_user_collection_if_not_exists(client, st.session_state.user_collection_name)
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Weaviate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!")
        st.rerun() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å UI
        return True
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return False

def logout():
    st.session_state.logged_in = False
    st.session_state.username = None
    st.session_state.user_collection_name = None
    st.info("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    st.rerun() # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å UI

# --- User-specific Collection Name ---
def get_user_collection_name():
    if st.session_state.logged_in and st.session_state.user_collection_name:
        return st.session_state.user_collection_name
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    return None

# --- UI for Login/Logout ---
if not st.session_state.logged_in:
    with st.sidebar.form("login_form"):
        st.sidebar.title("–í—Ö–æ–¥")
        username_input = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="login_username")
        password_input = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
        login_button = st.form_submit_button("–í–æ–π—Ç–∏")
        if login_button:
            login(username_input, password_input)
else:
    st.sidebar.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.username}")
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        logout()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ---
@st.cache_resource
def load_embedder():
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {EMBEDDING_MODEL_NAME}...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SentenceTransformer –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
        # –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å Streamlit
        from sentence_transformers import SentenceTransformer
        global sentence_transformer_loaded
        sentence_transformer_loaded = True
        
        embedder = SentenceTransformer(EMBEDDING_MODEL_NAME, use_auth_token=HF_TOKEN)
        logger.info("–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return embedder
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å SentenceTransformer: {e}")
        logger.error(traceback.format_exc())
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return None

# --- –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞: –æ—á–∏—Å—Ç–∫–∞, –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è/—Å—Ç–µ–º–º–∏–Ω–≥ ---
stemmer = SnowballStemmer("russian")
def preprocess_text(text: str) -> str:
    text = text.lower()
    text = re.sub(r'[^–∞-—è–ê-–Ø—ë–Å\s]', '', text)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    words = text.split()
    return ' '.join([stemmer.stem(word) for word in words])

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ ---
def search_chunks(query, client, embedder, n_results=5, alpha=0.5):
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = get_embedding(query, embedder)
        
        collection_name = get_user_collection_name() # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not collection_name:
            st.error("–í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
            return {
                "documents": [],
                "metadatas": [],
                "distances": [],
                "sources": []
            }
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_name}")

        if not client.collections.exists(collection_name):
            st.error(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
            return {
                "documents": [],
                "metadatas": [],
                "distances": [],
                "sources": []
            }
        
        collection = client.collections.get(collection_name)
        logger.info(f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection.name}")
        
        if alpha == 1.0:
            # –ß–∏—Å—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º —á–∏—Å—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
            result = collection.query.near_vector(
                near_vector=query_embedding,
                limit=n_results,
                return_properties=["text", "filename", "chunk_index", "page_number", "element_types"],
                return_metadata=["distance"]
            )
        elif alpha == 0.0:
            # –ß–∏—Å—Ç–æ BM25 –ø–æ–∏—Å–∫
            logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º —á–∏—Å—Ç–æ BM25 –ø–æ–∏—Å–∫")
            result = collection.query.bm25(
                query=query,
                limit=n_results,
                return_properties=["text", "filename", "chunk_index", "page_number", "element_types"]
            )
        else:
            # –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ —Å alpha={alpha}")
            result = collection.query.hybrid(
                query=query,  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è BM25
                vector=query_embedding,  # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                limit=n_results,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                alpha=alpha,  # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –º–µ–∂–¥—É BM25 (–±–ª–∏–∂–µ –∫ 0) –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º (–±–ª–∏–∂–µ –∫ 1)
                return_properties=["text", "filename", "chunk_index", "page_number", "element_types"],
                return_metadata=["distance"]
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        formatted_results = {
            "documents": [],  # –¢–µ–∫—Å—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            "metadatas": [],  # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            "distances": [],   # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            "sources": []     # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result.objects:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(result.objects)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            for obj in result.objects:
                formatted_results["documents"].append(obj.properties.get("text", ""))
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Å–ø–∏—Å–æ–∫
                element_types_str = obj.properties.get("element_types", "[]")
                try:
                    element_types_list = json.loads(element_types_str) if isinstance(element_types_str, str) else element_types_str
                except (json.JSONDecodeError, TypeError):
                    element_types_list = ["parsing_error"]

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                distance = None
                if hasattr(obj, 'metadata') and obj.metadata is not None:
                    if hasattr(obj.metadata, 'distance'):
                        distance = obj.metadata.distance
                    elif hasattr(obj.metadata, 'certainty'):
                        distance = 1.0 - obj.metadata.certainty

                logger.info(f"UUID: {obj.uuid}, Distance: {distance}, Type: {type(distance)}")
                
                metadata = {
                    "filename": obj.properties.get("filename", "N/A"),
                    "chunk_index": obj.properties.get("chunk_index", -1),
                    "page_number": obj.properties.get("page_number", 0),
                    "element_types": element_types_list,
                    "uuid": str(obj.uuid) # UUID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                }
                
                formatted_results["metadatas"].append(metadata)
                formatted_results["distances"].append(distance)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
                formatted_results["sources"].append({
                    "title": f"–î–æ–∫—É–º–µ–Ω—Ç: {obj.properties.get('filename', 'N/A')}",
                    "link": f"–ß–∞–Ω–∫ {obj.properties.get('chunk_index', -1)}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {obj.properties.get('page_number', 0)}",
                    "type": "document"
                })
                
        return formatted_results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {e}")
        logger.error(traceback.format_exc())
        return None

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
def search_web(query, num_results=3, follow_links=True, max_depth=1, use_llm_summary=True):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Programmable Search Engine.
    –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    
    Args:
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        num_results (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        follow_links (bool): –ï—Å–ª–∏ True, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        max_depth (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º
        use_llm_summary (bool): –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∂–∏–º–∫–∏
        
    Returns:
        tuple: (formatted_results, sources_list) - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π API
        if not GOOGLE_PSE_API_KEY or not GOOGLE_PSE_ID:
            logger.warning("API –∫–ª—é—á Google PSE –∏–ª–∏ ID –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google PSE –≤ .env —Ñ–∞–π–ª–µ", []
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Google Custom Search
        search_url = f"https://www.googleapis.com/customsearch/v1"
        params = {
            "key": GOOGLE_PSE_API_KEY,
            "cx": GOOGLE_PSE_ID,
            "q": query,
            "num": min(num_results, 10),  # API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            "hl": "ru",   # –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ä—É—Å—Å–∫–∏–π)
            "lr": "lang_ru"  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —è–∑—ã–∫—É (—Ä—É—Å—Å–∫–∏–π)
        }
        
        response = requests.get(search_url, params=params)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Google PSE: {response.status_code}")
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}", []
        
        search_data = response.json()
        search_results = []
        sources_list = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if "items" not in search_data or not search_data["items"]:
            return "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        for item in search_data["items"]:
            title = item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            link = item.get("link", "#")
            snippet = item.get("snippet", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
            
            search_result = {
                "title": title,
                "link": link,
                "snippet": snippet,
                "content": "",  # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ follow_links=True
                "summary": ""   # –î–ª—è –≤—ã–∂–∏–º–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            sources_list.append({
                "title": title,
                "link": link,
                "type": "web"
            })
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if follow_links and link != "#":
                try:
                    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {link}")
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                    headers = {
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                        "Accept-Language": "ru,en-US;q=0.9,en;q=0.8",
                        "Accept-Encoding": "gzip, deflate, br",
                        "Connection": "keep-alive",
                        "Upgrade-Insecure-Requests": "1",
                        "Cache-Control": "max-age=0"
                    }
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    page_response = requests.get(link, headers=headers, timeout=10)
                    
                    if page_response.status_code == 200:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        page_response.encoding = page_response.apparent_encoding
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é BeautifulSoup
                        soup = BeautifulSoup(page_response.text, 'html.parser')
                        
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        for tag in soup(["script", "style", "meta", "head", "footer", "nav", "iframe", "noscript"]):
                            tag.extract()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        page_text = ""
                        
                        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º article, main, content
                        main_content = soup.find(["article", "main", "div"], class_=lambda x: x and ("content" in x.lower() or "article" in x.lower()))
                        
                        if main_content:
                            page_text = main_content.get_text(separator="\n", strip=True)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page_text = soup.get_text(separator="\n", strip=True)
                            
                        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
                        page_text = re.sub(r'\n+', '\n', page_text)
                        page_text = re.sub(r'\s+', ' ', page_text)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                        search_result["content"] = page_text
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—ã–∂–∏–º–∫—É
                        if use_llm_summary and OPENROUTER_API_KEY:
                            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∂–∏–º–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {link}")
                            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Å—Å—ã–ª–æ–∫ –∏ —Å–Ω–æ—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—ã–∂–∏–º–∫–∏
                            cleaned_text = clean_text_for_summary(page_text)
                            summary = summarize_with_llm(cleaned_text, query)
                            search_result["summary"] = summary
                        
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {link} ({len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {link}. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {page_response.status_code}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {link}: {str(e)}")
                    
            search_results.append(search_result)
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        formatted_results = "\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:\n\n"
        for idx, result in enumerate(search_results, 1):
            formatted_results += f"{idx}. {result['title']}\n{result['snippet']}\n{result['link']}\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∂–∏–º–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if result["summary"]:
                formatted_results += f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {idx} (–≤—ã–∂–∏–º–∫–∞):\n{result['summary']}\n\n"
            # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —á–∞—Å—Ç–∏—á–Ω–æ
            elif result["content"]:
                formatted_results += f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {idx}:\n{result['content'][:1000]}...\n\n"
        
        return formatted_results, sources_list
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {e}")
        logger.error(traceback.format_exc())
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.", []

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM —á–µ—Ä–µ–∑ OpenRouter ---
def query_llm(query, context, model=None, use_model_knowledge=False, use_web_search=False, document_sources=None, follow_links=False, use_llm_summary=True):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ OPENROUTER_MODEL –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    global OPENROUTER_MODEL
    if os.getenv("OPENROUTER_MODEL") and os.getenv("OPENROUTER_MODEL") != OPENROUTER_MODEL:
        OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å OPENROUTER_MODEL: {OPENROUTER_MODEL}")
        
    if not OPENROUTER_API_KEY:
        st.error("API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ", []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    current_model = model if model is not None else OPENROUTER_MODEL
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {current_model}")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_sources = []
        if document_sources:
            all_sources.extend(document_sources)
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        web_context = ""
        web_sources = []
        if use_web_search:
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            web_search_results, web_sources = search_web(query, follow_links=follow_links, use_llm_summary=use_llm_summary)
            web_context = web_search_results
            all_sources.extend(web_sources)
            logger.info("–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://github.com/yourusername/opensourcerag", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å
            "X-Title": "OpenSource RAG"
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if use_model_knowledge:
            system_message = """–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–µ–Ω—Å–∏—è—Ö, –ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–µ.
            
–û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ,
—Ç—ã –º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. 
–Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–π, –∫–æ–≥–¥–∞ —Ç—ã –¥–æ–ø–æ–ª–Ω—è–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

–ö–æ–≥–¥–∞ —Ü–∏—Ç–∏—Ä—É–µ—à—å —Ñ–∞–∫—Ç—ã, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç '–ò—Å—Ç–æ—á–Ω–∏–∫[N]' –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–æ–º.

–û—Ç–≤–µ—á–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ –∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç–µ–º—ã, —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ.
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–ø–æ–∫–æ–π–Ω–æ –ø—Ä–∏–∑–Ω–∞–π —ç—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å."""
        else:
            system_message = """–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã).
–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å.

–ö–æ–≥–¥–∞ —Ü–∏—Ç–∏—Ä—É–µ—à—å —Ñ–∞–∫—Ç—ã, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç '–ò—Å—Ç–æ—á–Ω–∏–∫[N]' –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞. –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–¥ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–æ–º."""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        full_context = context
        if web_context:
            full_context += web_context
        
        data = {
            "model": current_model,
            "messages": [
                {"role": "system", "content": system_message},
                {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {full_context}\n\n–í–æ–ø—Ä–æ—Å: {query}"}
            ]
        }
        
        response = requests.post(f"{OPENROUTER_API_URL}/chat/completions", headers=headers, json=data)
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content'], all_sources
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM API: {response.status_code}")
            logger.error(response.text)
            return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM API: {response.status_code}", []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", []

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ ---
@lru_cache(maxsize=1024)
def get_embedding(text: str, embedder) -> list[float]:
    cleaned_text = preprocess_text(text)
    embedding = embedder.encode(cleaned_text, normalize_embeddings=True)
    return embedding.tolist()

# --- –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ process_file –∏–∑ main_fixed.py ---
spec = importlib.util.spec_from_file_location("main_fixed", os.path.join(os.path.dirname(__file__), "main_fixed.py"))
main_fixed = importlib.util.module_from_spec(spec)
spec.loader.exec_module(main_fixed)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∂–∏–º–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é LLM ---
def summarize_with_llm(text, query, max_length=1500):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é LLM.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        query (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        max_length (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–µ–ª–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ –≤—ã–∂–∏–º–∫–∏
        
    Returns:
        str: –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –≤—ã–∂–∏–º–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(text) <= max_length:
        return text
        
    try:
        if not OPENROUTER_API_KEY:
            logger.warning("API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫—É—é –≤—ã–∂–∏–º–∫—É.")
            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
            return text[:max_length] + "..."
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∂–∏–º–∫–∏ —Å –ø–æ–º–æ—â—å—é LLM –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        if len(text) > 10000:
            # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ, —Å–µ—Ä–µ–¥–∏–Ω—É –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
            first_part = text[:5000]
            mid_index = len(text) // 2
            middle_part = text[mid_index-1000:mid_index+1000]
            last_part = text[-3000:]
            truncated_text = f"{first_part}\n\n[...—Å–æ–∫—Ä–∞—â–µ–Ω–æ...]\n\n{middle_part}\n\n[...—Å–æ–∫—Ä–∞—â–µ–Ω–æ...]\n\n{last_part}"
        else:
            truncated_text = text
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å—Å—ã–ª–æ–∫ –∏ —Å–Ω–æ—Å–æ–∫ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
        truncated_text = clean_text_for_summary(truncated_text)
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://github.com/yourusername/opensourcerag",
            "X-Title": "OpenSource RAG Summary"
        }
        
        system_prompt = """–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫—Ä–∞—Ç–∫–∏—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –≤—ã–∂–∏–º–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã.
–í—ã–∂–∏–º–∫–∞ –¥–æ–ª–∂–Ω–∞:
1. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ñ–∞–∫—Ç—ã, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
2. –ë—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
3. –ë—ã—Ç—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–π (–¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤)
4. –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
5. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
6. –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–∏–¥–∞ [1], [2] –∏ —Ç.–¥.
7. –ù–µ –≤–∫–ª—é—á–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–Ω–æ—Å–∫–∏, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π —Ç–æ–ª—å–∫–æ –≤—ã–∂–∏–º–∫—É, –±–µ–∑ –≤–≤–µ–¥–µ–Ω–∏–π –∏ –º–µ—Ç–∞—Ç–µ–∫—Å—Ç–∞."""

        user_prompt = f"""–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}

–¢–µ–∫—Å—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è:
{truncated_text}

–°–æ–∑–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –∑–∞–ø—Ä–æ—Å—É."""
        
        data = {
            "model": OPENROUTER_MODEL,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
        }
        
        response = requests.post(f"{OPENROUTER_API_URL}/chat/completions", headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            summary = result['choices'][0]['message']['content']
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤—ã–∂–∏–º–∫–∞ –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return summary
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM API: {response.status_code}")
            logger.error(response.text)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–∂–∏–º–∫—É —á–µ—Ä–µ–∑ LLM, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            return text[:max_length] + "..."
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∂–∏–º–∫–∏ —Å –ø–æ–º–æ—â—å—é LLM: {e}")
        logger.error(traceback.format_exc())
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        return text[:max_length] + "..."

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å—Å—ã–ª–æ–∫ –∏ —Å–Ω–æ—Å–æ–∫ ---
def clean_text_for_summary(text):
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å—Å—ã–ª–æ–∫, —Å–Ω–æ—Å–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ [1], [2], [3] –∏ —Ç.–¥.
    cleaned_text = re.sub(r'\[\d+\]', '', text)
    
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ [a], [b], [c] –∏ —Ç.–¥.
    cleaned_text = re.sub(r'\[[a-zA-Z]\]', '', cleaned_text)
    
    # –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü
    cleaned_text = re.sub(r'[\xa0\u200b\u200c\u200d]', ' ', cleaned_text)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned_text = re.sub(r'\n+', '\n', cleaned_text)
    
    return cleaned_text.strip()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
def update_env_vars():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
    load_dotenv(override=True)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    new_env_vars = get_env_vars()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    global WEAVIATE_HOST, WEAVIATE_PORT, WEAVIATE_GRPC_PORT, OPENROUTER_API_KEY
    global OPENROUTER_MODEL, OPENROUTER_API_URL, HF_TOKEN, GOOGLE_PSE_API_KEY, GOOGLE_PSE_ID
    
    WEAVIATE_HOST = new_env_vars["WEAVIATE_HOST"]
    WEAVIATE_PORT = int(new_env_vars["WEAVIATE_PORT"]) if new_env_vars["WEAVIATE_PORT"] else 8080
    WEAVIATE_GRPC_PORT = int(new_env_vars["WEAVIATE_GRPC_PORT"]) if new_env_vars["WEAVIATE_GRPC_PORT"] else 50051
    OPENROUTER_API_KEY = new_env_vars["OPENROUTER_API_KEY"]
    OPENROUTER_MODEL = new_env_vars["OPENROUTER_MODEL"] or "anthropic/claude-3-haiku"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    OPENROUTER_API_URL = new_env_vars["OPENROUTER_API_URL"] or "https://openrouter.ai/api/v1"
    HF_TOKEN = new_env_vars["HUGGINGFACE_TOKEN"]
    GOOGLE_PSE_API_KEY = new_env_vars["GOOGLE_PSE_API_KEY"]
    GOOGLE_PSE_ID = new_env_vars["GOOGLE_PSE_ID"]
    
    logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å LLM: {OPENROUTER_MODEL}")
    
    return {
        "WEAVIATE_HOST": WEAVIATE_HOST,
        "WEAVIATE_PORT": WEAVIATE_PORT,
        "WEAVIATE_GRPC_PORT": WEAVIATE_GRPC_PORT,
        "OPENROUTER_MODEL": OPENROUTER_MODEL,
        "OPENROUTER_API_URL": OPENROUTER_API_URL
    }

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.markdown('''
    <style>
    /* –û–±—â–∏–π —Ñ–æ–Ω */
    .stApp { background-color: #f7fafd; }
    
    /* –°–∞–π–¥–±–∞—Ä */
    section[data-testid="stSidebar"] { background: linear-gradient(180deg, #e3f2fd 0%, #f7fafd 100%); }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton>button { 
        background-color: #1976d2; 
        color: white; 
        border-radius: 6px; 
        border: none;
        padding: 0.5rem 1rem;
        transition: all 0.3s;
    }
    .stButton>button:hover { 
        background-color: #1565c0; 
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        transform: translateY(-1px);
    }
    
    /* –ß–∞—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
    .chat-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-bottom: 20px;
    }
    
    /* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
    .chat-message {
        display: flex;
        align-items: flex-start;
        padding: 0.5rem 0;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ */
    .chat-avatar {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        margin-right: 12px;
        flex-shrink: 0;
    }
    
    .user-avatar {
        background: #1976d2;
        color: white;
    }
    
    .assistant-avatar {
        background: #43a047;
        color: white;
    }
    
    /* –ü—É–∑—ã—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π */
    .message-bubble {
        padding: 12px 16px;
        border-radius: 12px;
        max-width: 85%;
        position: relative;
        line-height: 1.5;
    }
    
    .user-message .message-bubble {
        background: #e3f2fd;
        border: 1px solid #bbdefb;
        border-top-left-radius: 2px;
    }
    
    .assistant-message .message-bubble {
        background: #f1f8e9;
        border: 1px solid #dcedc8;
        border-top-right-radius: 2px;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */
    .doc-card { 
        border: 1px solid #90caf9; 
        border-radius: 10px; 
        padding: 15px; 
        margin-bottom: 10px; 
        background: #f5faff;
        transition: all 0.2s;
    }
    
    .doc-card:hover {
        box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }
    
    .doc-title { 
        color: #1976d2; 
        font-weight: bold; 
    }
    
    .doc-meta { 
        color: #555; 
        font-size: 0.95em; 
        margin: 4px 0;
    }
    
    .doc-content { 
        color: #333; 
        margin-top: 10px; 
        padding: 8px;
        background: rgba(255,255,255,0.5);
        border-radius: 4px;
    }
    
    /* –í–∫–ª–∞–¥–∫–∏ */
    .stTabs [data-baseweb="tab-list"] { 
        background: #e3f2fd; 
        border-radius: 8px; 
        padding: 4px;
    }
    
    .stTabs [data-baseweb="tab"] { 
        border-radius: 6px;
    }
    
    .stTabs [aria-selected="true"] {
        background: #bbdefb;
        font-weight: bold;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —á–∞—Ç–∞ */
    @keyframes pulse {
        0% { opacity: 0.4; }
        50% { opacity: 0.8; }
        100% { opacity: 0.4; }
    }
    
    .loading-animation {
        display: flex;
        padding: 12px 16px;
    }
    
    .loading-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: #90caf9;
        margin: 0 3px;
        animation: pulse 1.5s infinite;
    }
    
    .loading-dot:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .loading-dot:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    /* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö */
    .message-content p {
        margin-bottom: 8px;
    }
    
    .message-content h1, 
    .message-content h2, 
    .message-content h3 {
        margin-top: 12px;
        margin-bottom: 8px;
    }
    
    .message-content ul, 
    .message-content ol {
        padding-left: 20px;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–¥–∞ */
    .message-content code {
        background: rgba(0,0,0,0.05);
        padding: 2px 4px;
        border-radius: 3px;
        font-family: monospace;
    }
    
    .message-content pre {
        background: #2d2d2d;
        color: #f9f9f9;
        padding: 12px;
        border-radius: 6px;
        overflow-x: auto;
    }
    </style>
''', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π
def render_chat_message(role, content, is_loading=False, feedback_key=None):
    if role == "user":
        avatar_icon = "üë§"
        avatar_class = "user-avatar"
        message_class = "user-message"
    else:  # assistant
        avatar_icon = "ü§ñ"
        avatar_class = "assistant-avatar"
        message_class = "assistant-message"
    
    message_html = f"""
    <div class="chat-message {message_class}">
        <div class="chat-avatar {avatar_class}">
            {avatar_icon}
        </div>
        <div class="message-bubble">
    """
    
    if is_loading:
        message_html += """
            <div class="loading-animation">
                <div class="loading-dot"></div>
                <div class="loading-dot"></div>
                <div class="loading-dot"></div>
            </div>
        """
    else:
        message_html += f'<div class="message-content">{content}</div>'
    
    message_html += "</div></div>"
    
    message_container = st.container()
    message_container.markdown(message_html, unsafe_allow_html=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    if role == "assistant" and feedback_key:
        feedback_col = message_container.columns([6, 1])[1]
        with feedback_col:
            st.feedback("thumbs", key=feedback_key)
    
    return message_container

# --- Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def main():
    # --- –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
    tabs = st.tabs(["üí¨ –ß–∞—Ç", "üì§ –ó–∞–≥—Ä—É–∑–∫–∞", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...'):
        embedder = load_embedder()
        client = connect_to_weaviate()
    if not embedder or not client:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        return
        
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    alpha = 0.5  # –ë–∞–ª–∞–Ω—Å BM25/–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5)
    n_results = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
    use_model_knowledge = True
    use_web_search = True if (GOOGLE_PSE_API_KEY and GOOGLE_PSE_ID) else False
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–µ–±-–ø–æ–∏—Å–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if "follow_links" not in st.session_state:
        st.session_state.follow_links = True
    if "use_llm_summary" not in st.session_state: 
        st.session_state.use_llm_summary = True
            
    # --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º ---
    with tabs[0]:
        col1, col2 = st.columns([1, 6])
        with col1:
            st.markdown("<h1 style='text-align: center; margin-bottom: 0px;'>üîç</h1>", unsafe_allow_html=True)
        with col2:
            st.markdown("<h1 style='margin-bottom: 0px;'>OpenSource RAG</h1>", unsafe_allow_html=True)
            st.markdown("<p style='margin-top: 0px;'>–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Å Weaviate –∏ OpenRouter</p>", unsafe_allow_html=True)

        # --- –ù–æ–≤—ã–π —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
        st.header("üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")
        if "messages" not in st.session_state:
            st.session_state.messages = []
        if "last_search" not in st.session_state:
            st.session_state.last_search = None
        if "is_generating" not in st.session_state:
            st.session_state.is_generating = False

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_container = st.container()
        with messages_container:
            for message in st.session_state.messages:
                render_chat_message(
                    role=message["role"], 
                    content=message["content"],
                    feedback_key=message.get("feedback_key")
                )
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if st.session_state.is_generating:
                render_chat_message(role="assistant", content="", is_loading=True)
        
        st.markdown('</div>', unsafe_allow_html=True)

        # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞...", key="main_chat_input", disabled=st.session_state.is_generating):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.messages.append({"role": "user", "content": prompt})
            render_chat_message(role="user", content=prompt)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            st.session_state.is_generating = True
            st.rerun()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            
        # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        if st.session_state.is_generating:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prompt = st.session_state.messages[-1]["content"]
            
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            search_results = search_chunks(prompt, client, embedder, n_results=n_results, alpha=alpha)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if (not search_results or not search_results['documents']) and use_web_search:
                web_context = "–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ..."
                follow_links_enabled = "follow_links" in st.session_state and st.session_state.follow_links
                use_llm_summary_enabled = "use_llm_summary" in st.session_state and st.session_state.use_llm_summary
                
                answer, sources = query_llm(prompt, "", use_model_knowledge=use_model_knowledge, 
                                          use_web_search=True, follow_links=follow_links_enabled,
                                          use_llm_summary=use_llm_summary_enabled)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                sources_md = ""
                if sources:
                    web_sources = [source for source in sources if source["type"] == "web"]
                    if web_sources:
                        sources_md = "\n\n### –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                        for i, source in enumerate(web_sources, 1):
                            sources_md += f"[{i}. {source['title']}]({source['link']})\n"
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                full_answer = answer + sources_md
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                feedback_key = f"feedback_{len(st.session_state.messages)}"
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": full_answer, 
                    "feedback_key": feedback_key, 
                    "sources": sources
                })
                
            elif not search_results or not search_results['documents']:
                # –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫–∞
                response = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
                st.session_state.messages.append({"role": "assistant", "content": response})
                
            else:
                # –ï—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                context = "\n\n".join(search_results['documents'])
                document_sources = search_results.get("sources", [])
                
                follow_links_enabled = "follow_links" in st.session_state and st.session_state.follow_links
                use_llm_summary_enabled = "use_llm_summary" in st.session_state and st.session_state.use_llm_summary
                
                answer, sources = query_llm(prompt, context, use_model_knowledge=use_model_knowledge, 
                                          use_web_search=use_web_search, document_sources=document_sources,
                                          follow_links=follow_links_enabled, use_llm_summary=use_llm_summary_enabled)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                sources_md = ""
                if sources:
                    web_sources = [source for source in sources if source["type"] == "web"]
                    if web_sources:
                        sources_md = "\n\n### –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                        for i, source in enumerate(web_sources, 1):
                            sources_md += f"[{i}. {source['title']}]({source['link']})\n"
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                full_answer = answer + sources_md
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                feedback_key = f"feedback_{len(st.session_state.messages)}"
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": full_answer, 
                    "feedback_key": feedback_key, 
                    "sources": sources
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                st.session_state.last_search = search_results
            
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            st.session_state.is_generating = False
            st.rerun()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –ö—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if st.session_state.get("last_search") and st.session_state.last_search['documents']:
            with st.expander("üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å)", expanded=False):
                for i, (doc, meta, dist) in enumerate(zip(st.session_state.last_search['documents'], 
                                                      st.session_state.last_search['metadatas'], 
                                                      st.session_state.last_search['distances'])):
                    if dist is not None:
                        try:
                            relevance = f"{1-float(dist):.2f}" if isinstance(dist, (float, int)) or (isinstance(dist, str) and dist.replace('.', '', 1).isdigit()) else "N/A"
                        except (ValueError, TypeError):
                            relevance = "N/A"
                    else:
                        relevance = "N/A"
                    st.markdown(f"""
                    <div class='doc-card'>
                        <div class='doc-title'>–î–æ–∫—É–º–µ–Ω—Ç {i+1}: {meta['filename']}</div>
                        <div class='doc-meta'>–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance} | –ß–∞–Ω–∫: {meta['chunk_index']}, –°—Ç—Ä–∞–Ω–∏—Ü–∞: {meta['page_number']} | UUID: {meta['uuid']}</div>
                        <div class='doc-meta'>–¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {', '.join(meta['element_types'])}</div>
                        <div class='doc-content'>{doc[:1500]}{'...' if len(doc) > 1500 else ''}</div>
                    </div>
                    """, unsafe_allow_html=True)
                    
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        if st.session_state.messages:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", type="primary", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
                st.session_state.messages = []
                st.session_state.last_search = None
                st.rerun()

    # --- –í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ---
    with tabs[1]:
        upload_page(on_back=lambda: st.session_state.update({"page": "chat"}))

    # --- –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
    with tabs[2]:
        st.header("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if not st.session_state.logged_in:
            st.warning("–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π.")
        else:
            st.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{st.session_state.username}`")
            user_collection_name = get_user_collection_name()
            st.markdown(f"**–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:** `{user_collection_name}`")
            client = connect_to_weaviate()
            if client and client.collections.exists(user_collection_name):
                collection = client.collections.get(user_collection_name)
                doc_count = collection.aggregate.over_all(total_count=True).total_count
                st.info(f"–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {doc_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
                st.markdown("### –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
                docs = collection.query.bm25(query="*", limit=20, return_properties=["text", "filename", "chunk_index", "page_number"])
                for obj in docs.objects:
                    st.markdown(f"<div class='doc-card'><b>{obj.properties.get('filename','N/A')}</b> | –ß–∞–Ω–∫: {obj.properties.get('chunk_index','-')}, –°—Ç—Ä: {obj.properties.get('page_number','-')}<br><span class='doc-content'>{obj.properties.get('text','')[:300]}{'...' if len(obj.properties.get('text',''))>300 else ''}</span></div>", unsafe_allow_html=True)
                    if st.button(f"–£–¥–∞–ª–∏—Ç—å —á–∞–Ω–∫ {obj.uuid}", key=f"del_{obj.uuid}", help="–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞–Ω–∫ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"):
                        try:
                            collection.data.delete_by_id(obj.uuid)
                            st.success(f"–ß–∞–Ω–∫ {obj.uuid} —É–¥–∞–ª—ë–Ω!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            else:
                st.info("–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")

# --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
def upload_page(on_back=None):
    st.title("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è on_back
    if on_back:
        if st.button("‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É", type="secondary"):
            on_back()
            st.rerun()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ
    with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤", expanded=False):
        st.markdown("""
        ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - PDF (`.pdf`)
        - Microsoft Word (`.docx`)
        - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (`.txt`)
        - Markdown (`.md`)
        - HTML (`.html`)
        - JSON (`.json`)
        - Email (`.eml`)
        
        ### –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:
        1. –§–∞–π–ª—ã —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —á–∞–Ω–∫–∏
        2. –°–æ–∑–¥–∞—é—Ç—Å—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        3. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Weaviate
        
        ### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
        - –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        - –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        - –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        """)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Weaviate
    embedder = load_embedder()
    client = connect_to_weaviate()
    
    if client and client.is_ready():
        try:
            user_collection_name = get_user_collection_name()
            if not user_collection_name:
                st.error("–í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
                return
            doc_count = 0 # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if client.collections.exists(user_collection_name):
                collection = client.collections.get(user_collection_name)
                doc_count = collection.aggregate.over_all(total_count=True).total_count
                st.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Weaviate –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: '{user_collection_name}'. –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}", icon="‚úÖ")
            else:
                st.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Weaviate –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è '{user_collection_name}' –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.", icon="‚ÑπÔ∏è")
        except Exception as e:
            st.warning(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Weaviate –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö: {e}")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Weaviate. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.")
        return
    
    # –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏", 
                                      type=["pdf", "docx", "txt", "md", "html", "json", "eml"], 
                                      accept_multiple_files=True)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if uploaded_files:
        st.write(f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")
        if st.button("–ù–∞—á–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é", type="primary", use_container_width=True):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_dir = tempfile.mkdtemp()
            try:
                for i, uploaded_file in enumerate(uploaded_files):
                    progress = i / len(uploaded_files)
                    progress_bar.progress(progress)
                    status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1} –∏–∑ {len(uploaded_files)}: {uploaded_file.name}")
                    
                    with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {uploaded_file.name}..."):
                        temp_path = os.path.join(temp_dir, uploaded_file.name)
                        with open(temp_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())
                        
                        current_collection_name = get_user_collection_name()
                        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ '{uploaded_file.name}' –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{current_collection_name}'.")
                        
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
                        if client and not client.collections.exists(current_collection_name):
                            logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{current_collection_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞.")
                            create_user_collection_if_not_exists(client, current_collection_name)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                        if client and client.collections.exists(current_collection_name):
                            success = main_fixed.process_file(temp_path, uploaded_file.name, current_collection_name, client, embedder)
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{current_collection_name}' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
                            st.error(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é '{current_collection_name}' –¥–ª—è —Ñ–∞–π–ª–∞ {uploaded_file.name}.")
                            success = False
                        
                        if success:
                            st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Weaviate!")
                        else:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {uploaded_file.name}.")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –Ω–µ–π
                shutil.rmtree(temp_dir, ignore_errors=True)
            
            progress_bar.progress(1.0)
            status_text.text("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —á–∞—Ç—É –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            if on_back:
                if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—Ç—É –ø–æ—Å–ª–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏", type="primary"):
                    on_back()
                    st.rerun()

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    if sys.version_info >= (3, 10):
        import asyncio
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    main()
